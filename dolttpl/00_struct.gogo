// Code generated by gola {{.VERSION}}; DO NOT EDIT.

package {{.Package}}
{{$table := .}}
import (
	"github.com/olachat/gola/corelib"

	{{.Imports}}
)

// {{.ClassName}} represents {{.Name}} table
type {{.ClassName}} struct {
	{{- range .SqlColumns }}
	// {{.Comment}} {{.DBType}}
	{{.GoName}}
	{{- end }}
}

type {{.ClassName}}Table struct{}

func (*{{.ClassName}}Table) GetTableName() string {
	return "{{.Name}}"
}

var table *{{.ClassName}}Table

// Fetch methods
func Fetch{{.ClassName}}ById(id int) *{{.ClassName}} {
	return corelib.FetchById[{{.ClassName}}](id)
}

func FetchById[T any](id int) *T {
	return corelib.FetchById[T](id)
}

func Fetch{{.ClassName}}ByIds(ids []int) []*{{.ClassName}} {
	return corelib.FetchByIds[{{.ClassName}}](ids)
}

func FetchByIds[T any](ids []int) []*T {
	return corelib.FetchByIds[T](ids)
}

// Column types

{{- range .SqlColumns }}
// {{.GoName}} field
// {{.Comment}}
type {{.GoName}} struct {
	val {{.GoType}}
}

func (c *{{.GoName}}) Get{{.GoName}}() {{.GoType}} {
	return c.val
}

func (c *{{.GoName}}) Set{{.GoName}}(val {{.GoType}}) {
	c.val = val
}

func (c *{{.GoName}}) GetColumnName() string {
	return "{{.Name}}"
}

func (c *{{.GoName}}) IsPrimaryKey() bool {
	return {{.IsPrimaryKey}}
}

func (c *{{.GoName}}) GetValPointer() interface{} {
	return &c.val
}

func (c *{{.GoName}}) GetTableType() corelib.TableType {
	return table
}
{{- end }}

func New{{.ClassName}}() *{{.ClassName}} {
	return &{{.ClassName}}{
	{{- range .SqlColumns }}
	{{- if .HasDefault}}
	{{.GoName}}{val:{{.GoDefaultValue}}},
	{{- else}}
	{{.GoName}}{},
	{{- end }}
	{{- end }}
	}
}
