// Code generated by gola 0.0.1; DO NOT EDIT.

package blogs

import (
	"github.com/olachat/gola/corelib"
)

// Blog represents blogs table
type Blog struct {
	//  int
	Id
	// User Id int
	UserId
	// Slug varchar(255)
	Slug
	// Title varchar(255)
	Title
	// Created Timestamp int unsigned
	CreatedAt
	// Updated Timestamp int unsigned
	UpdatedAt
}

type BlogTable struct{}

func (*BlogTable) GetTableName() string {
	return "blogs"
}

var table *BlogTable

// Fetch methods
func FetchBlogById(id int) *Blog {
	return corelib.FetchById[Blog](id)
}

func FetchById[T any, PT corelib.PointerType[T]](id int) *T {
	return corelib.FetchById[T](id)
}

func FetchBlogByIds(ids []int) []*Blog {
	return corelib.FetchByIds[Blog](ids)
}

func FetchByIds[T any, PT corelib.PointerType[T]](ids []int) []*T {
	return corelib.FetchByIds[T](ids)
}

// Column types
// Id field
//
type Id struct {
	val int
}

func (c *Id) GetId() int {
	return c.val
}

func (c *Id) SetId(val int) {
	c.val = val
}

func (c *Id) GetColumnName() string {
	return "id"
}

func (c *Id) IsPrimaryKey() bool {
	return true
}

func (c *Id) GetValPointer() interface{} {
	return &c.val
}

func (c *Id) GetTableType() corelib.TableType {
	return table
}

// UserId field
// User Id
type UserId struct {
	val int
}

func (c *UserId) GetUserId() int {
	return c.val
}

func (c *UserId) SetUserId(val int) {
	c.val = val
}

func (c *UserId) GetColumnName() string {
	return "user_id"
}

func (c *UserId) IsPrimaryKey() bool {
	return false
}

func (c *UserId) GetValPointer() interface{} {
	return &c.val
}

func (c *UserId) GetTableType() corelib.TableType {
	return table
}

// Slug field
// Slug
type Slug struct {
	val string
}

func (c *Slug) GetSlug() string {
	return c.val
}

func (c *Slug) SetSlug(val string) {
	c.val = val
}

func (c *Slug) GetColumnName() string {
	return "slug"
}

func (c *Slug) IsPrimaryKey() bool {
	return false
}

func (c *Slug) GetValPointer() interface{} {
	return &c.val
}

func (c *Slug) GetTableType() corelib.TableType {
	return table
}

// Title field
// Title
type Title struct {
	val string
}

func (c *Title) GetTitle() string {
	return c.val
}

func (c *Title) SetTitle(val string) {
	c.val = val
}

func (c *Title) GetColumnName() string {
	return "title"
}

func (c *Title) IsPrimaryKey() bool {
	return false
}

func (c *Title) GetValPointer() interface{} {
	return &c.val
}

func (c *Title) GetTableType() corelib.TableType {
	return table
}

// CreatedAt field
// Created Timestamp
type CreatedAt struct {
	val uint
}

func (c *CreatedAt) GetCreatedAt() uint {
	return c.val
}

func (c *CreatedAt) SetCreatedAt(val uint) {
	c.val = val
}

func (c *CreatedAt) GetColumnName() string {
	return "created_at"
}

func (c *CreatedAt) IsPrimaryKey() bool {
	return false
}

func (c *CreatedAt) GetValPointer() interface{} {
	return &c.val
}

func (c *CreatedAt) GetTableType() corelib.TableType {
	return table
}

// UpdatedAt field
// Updated Timestamp
type UpdatedAt struct {
	val uint
}

func (c *UpdatedAt) GetUpdatedAt() uint {
	return c.val
}

func (c *UpdatedAt) SetUpdatedAt(val uint) {
	c.val = val
}

func (c *UpdatedAt) GetColumnName() string {
	return "updated_at"
}

func (c *UpdatedAt) IsPrimaryKey() bool {
	return false
}

func (c *UpdatedAt) GetValPointer() interface{} {
	return &c.val
}

func (c *UpdatedAt) GetTableType() corelib.TableType {
	return table
}

func NewBlog() *Blog {
	return &Blog{
		Id{},
		UserId{val: int(0)},
		Slug{val: ""},
		Title{val: ""},
		CreatedAt{val: uint(0)},
		UpdatedAt{val: uint(0)},
	}
}
